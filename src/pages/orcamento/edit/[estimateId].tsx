import React, { useEffect, useState, useMemo, useRef } from 'react';
import Head from 'next/head'
import Navbar from '../../../../components/utils/Navbar';
import Estimate from '../../../../components/estimate/Estimate';
import Box from '@mui/material/Box';
import SearchField from '../../../../components/estimate/SearchField';
import ExportEstimatePDF from '../../../../components/estimate/ExportEstimatePDF';
import EstimateSelectedTable from '../../../../components/estimate/EstimateSelectedTable';
import { Divider, Button, Container } from '@mui/material';
import '@fontsource/roboto/400.css';
import { useRouter } from 'next/router';

type Product = {
    name: string;
    price: number;
    unity?: string;
    quantity?: number;
    price_amount?: number;
}

export default function EditPage() {
    const router = useRouter();
    const { estimateId } = router.query;
    const [products, setProducts] = useState([]);
    const [selectedProducts, setSelectedProducts] = useState<Product[]>([]);
    const [selectedQuantity, setSelectedQuantity] = useState<number>(2);
    const [totalAmount, setTotalAmount] = useState<number>(0.0);


    const [estimate, setEstimate] = useState({
        name: "",
        cnpj: "",
        statusId: 1,
        products: [],
    });

    const [busca, setBusca] = useState('');

    useEffect(() => {
        if (estimateId != undefined) {
            fetch(`/api/estimate/${estimateId}`)
                .then((response) => { return response.json(); })
                .then(data => { setEstimate(data); setSelectedProducts(data.products) })
        }


        fetch('/api/products/products')
            .then((response) => { return response.json(); })
            .then(data => { setProducts(data); })

    }, [estimateId])


    const saveEstimate = async (e) => {
        fetch("/api/estimate/update", {
            method: "POST",
            body: JSON.stringify(estimate),
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then((response) => { return response.json(); })
            .then(data => { console.log('Orçamento atualiado!') });

    };

    function handleSelectProduct<Product>(product) {
        setSelectedProducts((prevList) => {
            setTotalAmount(totalAmount + (product.price * selectedQuantity))
            product.quantity = selectedQuantity;
            return [product, ...prevList]
        });
    }

    //Busca no Array
    const filteredProducts = useMemo(() => {
        const lowerBusca = busca.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
        return products
            .filter((product) => product.name
                .toLowerCase()
                .normalize("NFD").replace(/[\ugi0300-\u036f]/g, "")
                .includes(lowerBusca))
    }, [busca, products])



    return (
        <>
            <Head>
                <title>EFICAZ - Orçamento</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Navbar />

            <Estimate>
                <p>Nome da Empresa: {estimate.name}</p>
                <Divider className='my-2' />
                <Box className='font-bold text-lg'>
                    <p>Buscar Produtos</p>
                    <SearchField className='w-6/12' onChange={(e) => setBusca(e.target.value)} />
                </Box>

                <Divider className='my-2' />


                <table>
                    <tbody>
                        {filteredProducts.map((product, index) => (
                            <tr key={index}>
                                <td className="w-20" >{product.name}</td>
                                <td className="w-20" >R$ {product.price}</td>
                                <td> <Button className="text-black rounded bg-white" onClick={e => handleSelectProduct(product)}>Adicionar</Button></td>
                            </tr>
                        ))}
                    </tbody>
                </table>

                <Divider className='my-2' />
                {/*div que será o PDF*/}

                <p className='text-lg font-bold my-2'>Produtos Selecionados</p>
                <Box className="font-bold text-lg text-right my-2">
                    <p>Valor Total: R$ {totalAmount}</p>
                </Box>

                <EstimateSelectedTable data={selectedProducts} setSelectedProducts={setSelectedProducts} setTotalAmount={setTotalAmount} totalAmount={totalAmount} />
                <Divider className='my-5' />
                <Box className='flex'>
                    <Box className='w-6/12 text-left flex gap-8'>
                        <Button onClick={(e) => saveEstimate(e)} className='bg-green-500 hover:bg-green-200 text-white ml-2'>Salvar</Button>
                        <ExportEstimatePDF selectedProducts={selectedProducts} />
                    </Box>



                </Box>
            </Estimate >
        </>
    )
}

