import React, { useEffect, useState, useMemo } from 'react';
import Head from 'next/head'
import Navbar from '../../components/Navbar';
import Estimate from '../../components/estimate/Estimate';
import { TextField } from '@mui/material';
import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';
import Box from '@mui/material/Box';
import SearchField from '../../components/estimate/SearchField';
import ExportEstimatePDF from '../../components/estimate/ExportEstimatePDF';


type Product = {
  name: string;
  unity?: string;
  quantity?: number;
  price: number;
  price_amount?: number;
}
export default function Home() {
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProducts, setSelectedProducts] = useState<Product[]>([]);
  const [totalAmount, setTotalAmount] = useState<Number>(0.0);

  const [busca, setBusca] = useState('');

  const columns: GridColDef[] = [
    { field: 'id', headerName: 'ID', width: 90 },
    {
      field: 'name',
      headerName: 'Nome',
      width: 150,
      editable: false,
    },
    {
      field: 'price',
      headerName: 'Preço',
      width: 150,
      editable: false,
    },
  ];

  useEffect(() => {
    const product = fetch('api/products/products')
      .then((response) => { return response.json(); })
      .then(data => { setProducts(data); })
      .finally(() => console.log(products))




  }, [])


  //Busca no Array
  const filteredProducts = useMemo(() => {
    const lowerBusca = busca.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    return products
      .filter((product) => product.name
        .toLowerCase()
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
        .includes(lowerBusca))
  }, [busca, products])

  //Add a item to orçamento
  function handleSelectProduct<Product>(product) {
    setSelectedProducts((prevList) => {
      setTotalAmount(totalAmount + product.price)
      return [product, ...prevList]
    });
  }

  function handleRemoveProduct<T>(index, product) {
    setSelectedProducts(oldValues => {
      setTotalAmount(totalAmount - product.price)
      return oldValues.filter((_, i) => i !== index)
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <Estimate>
        <SearchField onChange={(e) => setBusca(e.target.value)}/>

        <p> Produtos </p>

        {filteredProducts.map((product) => (
          <li key={product.name}>{product.name}  R$ {product.price}
            <button onClick={e => handleSelectProduct(product)}>Add+</button>
          </li>
        ))}

        <p> Produtos Selecionados </p>

        {selectedProducts.map((product, index) => (
          <li key={product.name}>{product.name}
            <button onClick={e => handleRemoveProduct(index, product)}>Remove-</button>
          </li>

        ))}

        R$ {totalAmount}

      <ExportEstimatePDF/>
      </Estimate>



    </>
  )
}
